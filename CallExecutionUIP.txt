#r  "System.Data" 
#r  "Microsoft.Azure.Documents.Client" 
#r  "Microsoft.WindowsAzure.Storage" 
#r  "Newtonsoft.Json"
#r  "System.Web"

using System;
using System.Data;
using Newtonsoft.Json.Linq;

using System.Collections.Generic;
using System.Web;
using System.Threading;
using System.Net;
using System.IO;
using System.Data.SqlClient;


public class Setting
{
    public string id  { get; set; }
    public string endPointSubmit { get; set; }
    public string apiKey { get; set; }
    public string baseEP { get; set; }

    public string getBaseEP()
    {

        int index  = endPointSubmit.IndexOf("?");
        string retval = "";
        if (index > 0)
            retval = endPointSubmit.Substring(0, index);
        return retval;
    }
}

public static string exec(string url)
{
    try
    {
        //MessageBox.Show("init exec:" + url);
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        var request = (HttpWebRequest)WebRequest.Create(url);
        request.ContentType = "application/json";
        request.Timeout = 1500000;
        var response = (HttpWebResponse)request.GetResponse();

        var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();
        //MessageBox.Show(responseString);
        return responseString;
    }
    catch (Exception e)
    {
        //MessageBox.Show(e + "");
        return "0";
    }

}

public class Connection
{
    string connectionString = "Data Source=laureatembiprod.database.windows.net;Initial Catalog=LUIStaging;User Id=ucaballero;Password=Laureate1";
    SqlConnection connection;
    SqlCommand cmd;

    public Connection()
    {
        this.connection = new SqlConnection(this.connectionString);
    }
    public void openConnection()
    {

        if (this.connection.State == ConnectionState.Open)
        {
            this.connection.Close();
            this.connection.Open();
        }
        else
        {
            this.connection.Open();
        }
    }

    public void closeConnection()
    {

        if (this.connection.State == ConnectionState.Open)
        {
            this.connection.Close();
        }
    }


    public List<Setting> getEngines()
    {
        List<Setting> retval = new List<Setting>();
        openConnection();
        this.cmd = new SqlCommand("SELECT ModelName, Endpoint, Token FROM [uip].[RetentionEngines]", this.connection);


        SqlDataReader reader = this.cmd.ExecuteReader();
        while (reader.Read())
        {
            Setting objSetting = new Setting();
            objSetting.id = reader.GetString(0);
            objSetting.endPointSubmit = reader.GetString(1);
            objSetting.apiKey = reader.GetString(2);
            retval.Add(objSetting);
        }

        closeConnection();
        return retval;
    }

    public int updateEngineValidationFlag(string val)
    {
        try
        {
            int rowsAff = 0;
            openConnection();
            if (val != "-1")
                this.cmd = new SqlCommand("UPDATE [uip].[settings] SET Value = @value WHERE Category = 'ValidationProcess' AND [Key] = 'EngineExecutionValidation' AND Value != 0", this.connection);
            else
                this.cmd = new SqlCommand("UPDATE [uip].[settings] SET Value = @value WHERE Category = 'ValidationProcess' AND [Key] = 'EngineExecutionValidation'", this.connection);

            System.Data.SqlClient.SqlParameter pVal = new System.Data.SqlClient.SqlParameter("@value", SqlDbType.NVarChar);
            pVal.Value = val;
            this.cmd.Parameters.Add(pVal);

            rowsAff = this.cmd.ExecuteNonQuery();
            closeConnection();

            return rowsAff;

        }
        catch (Exception)
        {
            return -1;
        }
    }

    public int updateFailureReason(string val)
    {
        try
        {
            int rowsAff = 0;
            openConnection();

            this.cmd = new SqlCommand("UPDATE [uip].[settings] SET Value = @value WHERE category = 'ValidationProcess' AND [key] = 'FailureReason'", this.connection);

            System.Data.SqlClient.SqlParameter pVal = new System.Data.SqlClient.SqlParameter("@value", SqlDbType.NVarChar);
            pVal.Value = val;
            this.cmd.Parameters.Add(pVal);

            rowsAff = this.cmd.ExecuteNonQuery();
            closeConnection();

            return rowsAff;

        }
        catch (Exception ex)
        {
            return -1;
        }
    }

    public int getEngineExecutionValidation()
    {
        openConnection();
        this.cmd = new SqlCommand("SELECT TOP 1 Value FROM [uip].[settings] WHERE category = 'ValidationProcess' AND [key] = 'EngineExecutionValidation'", this.connection);
        SqlDataReader reader = this.cmd.ExecuteReader();
        int retval = 0;
        try
        {
            if (reader.Read())
            {
                string retvalStr = reader.GetString(0);
                retval = int.Parse(retvalStr);
            }
        }
        catch (Exception)
        {
            retval = 0;
        }
        closeConnection();
        return retval;
    }


}

public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log)
{
      // TODO: Add your code here
    Connection objConnection = new Connection();
    List<Setting> settingQuery = objConnection.getEngines();

    int neededSuccesses = settingQuery.Count;
    int successes = 0;
    string functionUrl = @"https://centam-appservice.azurewebsites.net/api/ExecuteEngineUIP?code=geukwkmJxaQKuDWhf3vAacpww5QlN7CXQFOGNvOTAtGCWDgVMEy9qg==";
    foreach (Setting settings in settingQuery)
    {
        string submitUrl = settings.getBaseEP();
        submitUrl = HttpUtility.UrlEncode(submitUrl);
        string key = settings.apiKey;
        key = HttpUtility.UrlEncode(key);
        int maxTries = 1;
        int tries = 0;
        bool success = false;
        string url = functionUrl + "&endpoint=" + submitUrl + "&token=" + key;
        while (!success && tries < maxTries)
        {
            try
            {
                string response = exec(url);
                if (response == "1")
                    successes++;
                success = true;
            }
            catch (Exception)
            {
                Thread.Sleep(15000);
                if (objConnection.getEngineExecutionValidation() == 1)
                {
                    success = true;
                    successes++;
                }

            }
            tries++;
        }
        if (!success)
        {
            break;
        }
        Thread.Sleep(10000);
    } 
    string resultMess = "Failed";
     if (successes == neededSuccesses){
        objConnection.updateEngineValidationFlag("1");
        resultMess = "Complete";
        JObject result = new JObject();
        result.Add("status", resultMess);
        log.Info("Response: "+resultMess);
        return req.CreateResponse(HttpStatusCode.OK, result);
    }else{
        objConnection.updateEngineValidationFlag("0");
        JObject result = new JObject();
        result.Add("status", resultMess);
        log.Info("Response: "+resultMess);
        return req.CreateResponse(HttpStatusCode.InternalServerError, result);
    }
}
