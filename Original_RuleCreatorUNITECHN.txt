/*
#r  "System.Data" 
#r  "Microsoft.Azure.Documents.Client" 
#r  "Microsoft.WindowsAzure.Storage" 
#r  "Newtonsoft.Json"
using Microsoft.Azure.Documents;
using Microsoft.Azure.Documents.Client;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

class RiskRow
    {
        public string campus { get; set; }
        public string totalstudents { get; set; }
        public string green { get; set; }
        public string red { get; set; }
        public string yellow { get; set; }
        public string orange { get; set; }

        public RiskRow()
        {

        }
        public RiskRow(string campus, string totalstudents, string green, string red, string yellow, string orange)
        {
            this.campus = campus;
            this.totalstudents = totalstudents;
            this.green = green;
            this.red = red;
            this.yellow = yellow;
            this.orange = orange;
        }
    }
public class value
{
    public string leyenda { get; set; }
    public string replace { get; set; }
}
class Rule
    {
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        public string template_id { get; set; }
        public string schedule { get; set; }
        public string _group { get; set; }
        public string file { get; set; }
        public string container { get; set; }
        public string available { get; set; }
        public value[] values { get; set; }
        public string mode { get; set; }
         public string type { get; set; }


        public override string ToString()
        {
            return JsonConvert.SerializeObject(this);
        }

           
        
        public Rule(RiskRow riskrow,TraceWriter log)
        {
            log.Info("hey");
            Id = riskrow.campus;
            template_id = riskrow.campus + "_TEMPLATE";
            schedule = "Now";
            _group = riskrow.campus;
            log.Info(riskrow.campus);
            log.Info(riskrow.campus);
            file = riskrow.campus + " Report.xls";
            container = "unitechnreports";
            available = "1";
            values = new value[]{
                new value {leyenda="%total%",replace=(riskrow.totalstudents)},
                new value {leyenda="%green%",replace=(riskrow.green+"%")},
                new value {leyenda="%yellow%",replace=(riskrow.yellow+"%")},
                new value {leyenda="%orange%",replace=(riskrow.orange+"%")},
                new value {leyenda="%red%",replace=(riskrow.red+"%")}
            };
            mode = "production";
            type = "Email Test";
        }
    }
class Connection
    {
        string connectionString = "Data Source=laureatembiprod.database.windows.net;Initial Catalog=LUIStaging;User Id=laureatembi;Password=mbi2016*";
        string initCatalog = "LUIStaging";
        SqlConnection connection;
        SqlCommand cmd;

        public Connection()
        {
            this.connection = new SqlConnection(this.connectionString);
        }
        public Connection(string catalog)
        {
            this.connectionString = "Data Source=laureatembiprod.database.windows.net;Initial Catalog=" + catalog + ";User Id=laureatembi;Password=mbi2016*";
            this.initCatalog = catalog;
            this.connection = new SqlConnection(this.connectionString);
        }

        public void openConnection()
        {

            if (this.connection.State == ConnectionState.Open)
            {
                this.connection.Close();
                this.connection.Open();
            }
            else
            {
                this.connection.Open();
            }
        }

        public void closeConnection()
        {

            if (this.connection.State == ConnectionState.Open)
            {
                this.connection.Close();
            }
        }

        public bool getFlagMail(string campus)
        {
            try
            {
                openConnection();
                this.cmd = new SqlCommand("SELECT value FROM [unitechn].[settings] WHERE category = 'FlagMail' AND keyInformation = @campus", this.connection);
                 System.Data.SqlClient.SqlParameter pCampus = new System.Data.SqlClient.SqlParameter("@campus", SqlDbType.NVarChar);
                pCampus.Value = campus;
                this.cmd.Parameters.Add(pCampus);
                SqlDataReader reader = this.cmd.ExecuteReader();
                string value = "";
                if(reader.Read()){
                    value = reader.GetString(0);
                }
                closeConnection();
                if (value == "NO")
                {
                    return false;
                }
                else if (value == "YES")
                {
                    return true;
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }

        }

        public int getProcessingWeek()
        {
            openConnection();
            this.cmd = new SqlCommand("SELECT TOP 1 week FROM [unitechn].[settings] WHERE week IS NOT NULL", this.connection);
            SqlDataReader reader = this.cmd.ExecuteReader();
            int retval = 0;
            try{
                while(reader.Read()){
                    string retvalStr = reader.GetString(0);
                    retval = int.Parse(retvalStr);
                }
            }catch(Exception){
                retval = 0;
            }
            closeConnection();
            return retval;
        }

        public bool truncateNotificationTable()
        {
            try
            {
                if (this.initCatalog == "LAP")
                {
                    openConnection();
                    this.cmd = new SqlCommand("truncate table [dbo].[notificationHonduras]", this.connection);
                    this.cmd.ExecuteNonQuery();
                    closeConnection();
                }
                return true;
            }
            catch (Exception)
            {
                closeConnection();
                return false;
            }
        }

        public List<RiskRow> getRiskRows()
        {
            List<RiskRow> retval = new List<RiskRow>();
            openConnection();
            this.cmd = new SqlCommand("SELECT Campus,totalstudents,Green,Red,Yellow,Orange FROM [unitechn].[RiskStudent]", this.connection);
            SqlDataReader reader = this.cmd.ExecuteReader();
            while (reader.Read())
            {
                retval.Add(new RiskRow(reader.GetString(0),reader.GetInt32(1).ToString(),reader.GetDecimal(2).ToString(),
                    reader.GetDecimal(3).ToString(),reader.GetDecimal(4).ToString(),reader.GetDecimal(5).ToString()));
            }
            closeConnection();
            return retval;
        }
}
  public class RuleCreator
    {
        TraceWriter log;   
        public RuleCreator(TraceWriter log){
            this.log=log;
        }
        private const string EndpointUrl = "https://notifications-engine.documents.azure.com:443/";
        private const string PrimaryKey = "NQut8q1p1MIQkyonjOtETwaTPTpFduId68he8u4eI7DcIQ44V1FkBRofQuH8Sz5ISP4hLkJJH8JxbuSwVM1WNQ==";
        private string db = "notification_engine";
        private string collection = "Rules";
        private DocumentClient client;


       // public IDictionary<string, string> Execute(IEnumerable<LinkedService> linkedServices,
         //                 IEnumerable<Dataset> datasets, Activity activity, IActivityLogger logger)
       // {
         //   runDemo().Wait();
           // return new Dictionary<string, string>();
        //}
        //public void init()
        //{
          //  runDemo().Wait();
        //}
        public void init()
        {
                runDemo().Wait();
        }
        private async Task runDemo()
        {
            //log.Info("hola0");
            this.client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);
            Connection objConnection = new Connection();
            List<RiskRow> riskrows = new List<RiskRow>();
            riskrows = objConnection.getRiskRows();
            for (int i = 0; i < riskrows.Count; i++)
            {
                if(!objConnection.getFlagMail(riskrows[i].campus)){
                    riskrows[i].campus += "-ERROR";
                }
            }

            List<Rule> rules = new List<Rule>();
            foreach (RiskRow item in riskrows)
            {
                log.Info("hola");
                Rule tmpRule = new Rule(item,log);
                rules.Add(tmpRule);
                await CreateRuleDocumentIfNotExists(this.db, this.collection, tmpRule);
                //Document created = await this.client.CreateDocumentAsync(UriFactory.CreateDocumentCollectionUri(this.db, this.collection), tmpRule);
                //Console.WriteLine(created);
            }

            
        }

        private async Task CreateRuleDocumentIfNotExists(string databaseName, string collectionName, Rule rule)
        {
            bool notFound = false;
            try
            {
                await this.client.ReadDocumentAsync(UriFactory.CreateDocumentUri(databaseName, collectionName, rule.Id));
                //this.WriteToConsoleAndPromptToContinue("Found {0}", family.Id);
            }
            catch (DocumentClientException de)
            {
                if (de.StatusCode == HttpStatusCode.NotFound)
                {
                    notFound = true;
                    //this.WriteToConsoleAndPromptToContinue("Created Family {0}", family.Id);
                }
                else
                {
                    throw;
                }
            }
            if(notFound){
                Document created = await this.client.CreateDocumentAsync(UriFactory.CreateDocumentCollectionUri(databaseName, collectionName), rule);
                //Console.WriteLine(created);
            }
            else
            {
                Document replacingFor = await this.client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(databaseName, collectionName, rule.Id), rule);
                //Console.WriteLine(replacingFor);
            }
            
        }

        private async void sendDocuments(List<Rule> rules)
        {
            foreach (Rule item in rules)
            {
                await this.CreateRuleDocumentIfNotExists(this.db, this.collection, item);
            }
        }
    }

public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log)
{
    log.Info("C# HTTP trigger function processed a request.");
    int res = 1;
    string response = "Success.";
    Connection objConnection = new Connection();
    
        RuleCreator rc = new RuleCreator(log);
         rc.init();
    
    
    JObject result = new JObject();
    result.Add("status", "complete");

    return res != 1
        ? req.CreateResponse(HttpStatusCode.InternalServerError, "Failure")
        : req.CreateResponse(HttpStatusCode.OK, result);

    
}
*/