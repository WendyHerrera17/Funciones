#r  "System.Data" 
#r  "Microsoft.Azure.Documents.Client" 
#r  "Microsoft.WindowsAzure.Storage" 
#r  "Newtonsoft.Json"
using Microsoft.Azure.Documents;
using Microsoft.Azure.Documents.Client;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

public class RiskRow
{
    public string University { get; set; }
    public string ApKey { get; set; }
    public int WkOfAp { get; set; }
    public int TotalStudents { get; set; }
    public decimal Red { get; set; }
    public decimal Yellow { get; set; }
    public decimal Green { get; set; }


    public RiskRow()
    {

    }
    public RiskRow(string university, int totalStudents, decimal red, decimal yellow, decimal green)
    {
        University = university;
        TotalStudents = totalStudents;
        Red = red;
        Yellow = yellow;
        Green = green;
    }
}
public class value
{
    public string leyenda { get; set; }
    public string replace { get; set; }
}
public class Rule
{
    [JsonProperty(PropertyName = "id")]
    public string Id { get; set; }
    public string template_id { get; set; }
    public string schedule { get; set; }
    public string _group { get; set; }
    public string file { get; set; }
    public string container { get; set; }
    public string subject { get; set; }
    public string available { get; set; }
    public value[] values { get; set; }
    public string mode { get; set; }
    public string type { get; set; }

    public override string ToString()
    {
        return JsonConvert.SerializeObject(this);
    }

    public Rule(RiskRow riskrow)
    {
        Id = riskrow.University;
        template_id = riskrow.University + "_TEMPLATE";
        schedule = "Now";
        _group = riskrow.University;
        file = riskrow.University+" Report.xls";
        container="uamreports";
        subject = riskrow.University + " Summary Week " + riskrow.WkOfAp;
        available = "1";
        values = new value[]{
            new value {leyenda="%total%",replace=(riskrow.TotalStudents.ToString())},
            new value {leyenda="%green%",replace=(riskrow.Green+"%")},
            new value {leyenda="%yellow%",replace=(riskrow.Yellow+"%")},
            new value {leyenda="%red%",replace=(riskrow.Red+"%")}
        };
        mode = "production";
        type = "Email Test";
    }
}
public class Connection
{
    string connectionString = "Data Source=laureatembiprod.database.windows.net;Initial Catalog=LUIStaging;User Id=ucaballero;Password=Laureate1";
    SqlConnection connection;
    SqlCommand cmd;

    public Connection()
    {
        this.connection = new SqlConnection(this.connectionString);
    }
    public void openConnection()
    {

        if (this.connection.State == ConnectionState.Open)
        {
            this.connection.Close();
            this.connection.Open();
        }
        else
        {
            this.connection.Open();
        }
    }

    public void closeConnection()
    {

        if (this.connection.State == ConnectionState.Open)
        {
            this.connection.Close();
        }
    }
    public List<RiskRow> getRiskRows()
    {
        List<RiskRow> retval = new List<RiskRow>();
        openConnection();
        this.cmd = new SqlCommand("SELECT University,TotalStudents,Red,Yellow,Green FROM [ulatina].[RiskStudent]", this.connection);
        SqlDataReader reader = this.cmd.ExecuteReader();
        while (reader.Read())
        {
            retval.Add(new RiskRow(reader.GetString(0), reader.GetInt32(1), reader.GetDecimal(2), reader.GetDecimal(3), reader.GetDecimal(4)));
        }
        closeConnection();
        return retval;
    }

    public bool getFlagMail(string university)
    {
        bool retval = false;
        openConnection();
        
        this.cmd = new SqlCommand("SELECT Value FROM [ulatina].[settings] WHERE Category = 'FlagMail' AND [Key] = @University", this.connection);

        System.Data.SqlClient.SqlParameter pUni = new System.Data.SqlClient.SqlParameter("@University", SqlDbType.NVarChar);
        pUni.Value = university;
        this.cmd.Parameters.Add(pUni);
        
        SqlDataReader reader = this.cmd.ExecuteReader();
        if (reader.Read())
        {
            string flag = reader.GetString(0);
            retval = (flag == "1");
        }
        closeConnection();
        return retval;
    }

    public int getProcessingWeek()
    {
        openConnection();
        this.cmd = new SqlCommand("SELECT TOP 1 Value FROM [ulatina].[settings] WHERE Category = 'Week' AND [Key] = 'Week'", this.connection);
        SqlDataReader reader = this.cmd.ExecuteReader();
        int retval = 0;
        try
        {
            if (reader.Read())
            {
                string retvalStr = reader.GetString(0);
                retval = int.Parse(retvalStr);
            }
        }
        catch (Exception)
        {
            retval = 0;
        }
        closeConnection();
        return retval;
    }

    public int getEngineExecutionValidation()
    {
        openConnection();
        this.cmd = new SqlCommand("SELECT TOP 1 Value FROM [ulatina].[settings] WHERE Category = 'ValidationProcess' AND [Key] = 'EngineExecutionValidation'", this.connection);
        SqlDataReader reader = this.cmd.ExecuteReader();
        int retval = 0;
        try
        {
            if (reader.Read())
            {
                string retvalStr = reader.GetString(0);
                retval = int.Parse(retvalStr);
            }
        }
        catch (Exception)
        {
            retval = 0;
        }
        closeConnection();
        return retval;
    }
}
public class RuleCreator
{
    private const string EndpointUrl = "https://notifications-engine.documents.azure.com:443/";
    private const string PrimaryKey = "NQut8q1p1MIQkyonjOtETwaTPTpFduId68he8u4eI7DcIQ44V1FkBRofQuH8Sz5ISP4hLkJJH8JxbuSwVM1WNQ==";
    private string db = "notification_engine";
    private string collection = "Rules";
    private DocumentClient client;

    public int init()
    {
        try{
            runDemo().Wait();
            return 1;
        }catch(Exception){
            return 0;
        }
        
    }

    private async Task runDemo()
    {
        this.client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);
        Connection objConnection = new Connection();
        List<RiskRow> riskrows = new List<RiskRow>();
        riskrows = objConnection.getRiskRows();
        int week = objConnection.getProcessingWeek();
        for (int i = 0; i < riskrows.Count; i++)
        {
            riskrows[i].WkOfAp = week;
            if (!objConnection.getFlagMail(riskrows[i].University))
            {
                riskrows[i].University += "-ERROR";
            }
        }

        List<Rule> rules = new List<Rule>();
        foreach (RiskRow item in riskrows)
        {

            Rule tmpRule = new Rule(item);
            rules.Add(tmpRule);
            await CreateRuleDocumentIfNotExists(this.db, this.collection, tmpRule);

        }
    }
    private async Task CreateRuleDocumentIfNotExists(string databaseName, string collectionName, Rule rule)
    {
        bool notFound = false;
        try
        {
            await this.client.ReadDocumentAsync(UriFactory.CreateDocumentUri(databaseName, collectionName, rule.Id));
            //this.WriteToConsoleAndPromptToContinue("Found {0}", family.Id);
        }
        catch (DocumentClientException de)
        {
            if (de.StatusCode == HttpStatusCode.NotFound)
            {
                notFound = true;
                //this.WriteToConsoleAndPromptToContinue("Created Family {0}", family.Id);
            }
            else
            {
                throw;
            }
        }
        if (notFound)
        {
            Document created = await this.client.CreateDocumentAsync(UriFactory.CreateDocumentCollectionUri(databaseName, collectionName), rule);
            //Console.WriteLine(created);
        }
        else
        {
            Document replacingFor = await this.client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(databaseName, collectionName, rule.Id), rule);
            //Console.WriteLine(replacingFor);
        }

    }

}

public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log)
{
    log.Info("C# HTTP trigger function processed a request.");
    int res = 1;
    string response = "Success.";
    Connection objConnection = new Connection();
    if(objConnection.getEngineExecutionValidation() == 1){
        RuleCreator rc = new RuleCreator();
        res = rc.init();
    }else{
        response = "RuleCreator wasn't executed.";
    }
    
    JObject result = new JObject();
    result.Add("status", "complete");

    return res != 1
        ? req.CreateResponse(HttpStatusCode.InternalServerError, "Failure")
        : req.CreateResponse(HttpStatusCode.OK, result);

    
}
